package com.rakuten.r1001.action;

import com.rakuten.util.Utility;

import jp.co.rakuten.rms.mall.order.api.client.AsyncReceiptModel;
import jp.co.rakuten.rms.mall.order.api.client.GetOrderRequestModel;
import jp.co.rakuten.rms.mall.order.api.client.GetOrderResponseModel;
import jp.co.rakuten.rms.mall.order.api.client.GetRequestIdResponseModel;
import jp.co.rakuten.rms.mall.order.api.client.OrderApiService;
import jp.co.rakuten.rms.mall.order.api.client.OrderApiService_Service;
import jp.co.rakuten.rms.mall.order.api.client.OrderModel;
import jp.co.rakuten.rms.mall.order.api.client.UpdateOrderRequestModel;
import jp.co.rakuten.rms.mall.order.api.client.UserAuthModel;

public class CopyOftestMain {

	public static void main(String[] args) throws Exception {
		OrderApiService_Service api = new OrderApiService_Service();

		// ポートを生成します
		OrderApiService port = api.getOrderApiServicePort();
		// 認証モデルを生成します
		UserAuthModel auth = new UserAuthModel();
		// 認証キーをセットします
		auth.setAuthKey(Utility.getApiKey("coverforefront"));
		// 店舗URL をセットします
		auth.setShopUrl("coverforefront");
		// ユーザー名をセットします
		auth.setUserName("dongtze");
		// レスポンスモデルを生成します
		// UpdateOrderResponse
		// getRequestId を呼出します
		GetOrderRequestModel getmode = new GetOrderRequestModel();
		String[] orderNoList = new String[] { "306685-20150325-0218089237",
				"306685-20150326-0225146306", "306685-20150327-0223622135",
				"306685-20150328-0224704113", "306685-20150328-0229322111",
				"306685-20150328-0233247115", "306685-20150328-0234321131",
				"306685-20150328-0235282208", "306685-20150328-0235455115",
				"306685-20150328-0240767226", "306685-20150328-0242104222",
				"306685-20150328-0242330317", "306685-20150328-0242620222",
				"306685-20150328-0244034211", "306685-20150328-0244158212",
				"306685-20150329-0198077303", "306685-20150329-0201824202",
				"306685-20150329-0230120136", "306685-20150329-0230415121",
				"306685-20150329-0236488120", "306685-20150329-0238751329",
				"306685-20150329-0239162120", "306685-20150329-0239593131",
				"306685-20150329-0240017207", "306685-20150329-0240238316",
				"306685-20150329-0241226128", "306685-20150329-0243739221",
				"306685-20150329-0244270128", "306685-20150329-0245145239",
				"306685-20150329-0246361307", "306685-20150329-0248255233",
				"306685-20150329-0248362214", "306685-20150329-0248459215",
				"306685-20150329-0252580231", "306685-20150329-0257146321",
				"306685-20150329-221794857", "306685-20150330-0230844142",
				"306685-20150330-0239171132", "306685-20150330-0240983121",
				"306685-20150330-0245626313", "306685-20150330-0247039234",
				"306685-20150330-0249096316", "306685-20150330-0249934302",
				"306685-20150330-0251022316", "306685-20150330-0252799324",
				"306685-20150330-0261433218", "306685-20150330-094388310",
				"306685-20150331-0247199111", "306685-20150331-0250303229",
				"306685-20150331-0252550327", "306685-20150331-0256148205",
				"306685-20150331-0260468317", "306685-20150331-0266170218",
				"306685-20150401-0112153210", "306685-20150401-0253268139",
				"306685-20150401-0255933137", "306685-20150401-0258372106",
				"306685-20150401-0261663223", "306685-20150401-0262743314",
				"306685-20150401-0265115214", "306685-20150401-0266710339",
				"306685-20150401-0268014331", "306685-20150401-0269192336",
				"306685-20150401-0269651323", "306685-20150401-0269885317",
				"306685-20150401-0271895212", "306685-20150402-0260659124",
				"306685-20150402-0270410217", "306685-20150402-0273371216",
				"306685-20150402-0273996224", "306685-20150402-0274494337",
				"306685-20150403-0267891116", "306685-20150404-0279062301",
				"306685-20150404-0279550117", "306685-20150404-0282130332",
				"306685-20150404-0285589232", "306685-20150404-0288955216",
				"306685-20150405-0131258310", "306685-20150405-0245115202",
				"306685-20150405-0266157142", "306685-20150405-0273762121",
				"306685-20150405-0276324103", "306685-20150405-0277190120",
				"306685-20150405-0277918116", "306685-20150405-0286211217",
				"306685-20150405-0286729314", "306685-20150405-0289525339",
				"308759-20150323-0209410201", "308759-20150326-0222603239",
				"308759-20150327-0219151107", "308759-20150327-0229985335",
				"308759-20150328-0226409136", "308759-20150328-0227012141",
				"308759-20150328-0235107114", "308759-20150328-0247704218",
				"308759-20150329-0233117129", "308759-20150329-0239410237",
				"308759-20150329-0241421306", "308759-20150329-0242133236",
				"308759-20150329-0242972328", "308759-20150329-0250999211",
				"308759-20150330-0250035330", "308759-20150330-0250237213",
				"308759-20150330-0251739234", "308759-20150330-0258408216",
				"308759-20150331-0243971138", "308759-20150331-0244961119",
				"308759-20150331-0258624334", "308759-20150401-0255199139",
				"308759-20150401-0266635238", "308759-20150401-0268490204",
				"308759-20150402-0262546137", "308759-20150402-0267898128",
				"308759-20150403-0230935303", "308759-20150404-0289226231",
				"308759-20150405-0121616110", "308759-20150405-0275592106",
				"308759-20150405-0283935335" };
		for (String orderno : orderNoList) {
			getmode.getOrderNumber().add(orderno);
		}

		GetOrderResponseModel getResponse = port.getOrder(auth, getmode);
		GetRequestIdResponseModel res = port.getRequestId(auth);
		int reqId = res.getRequestId();

		UpdateOrderRequestModel updatemodel = new UpdateOrderRequestModel();
		updatemodel.setRequestId(reqId);

		for (OrderModel order : getResponse.getOrderModel()) {
			order.setStatus("処理済");
			updatemodel.getOrderModel().add(order);
		}

		AsyncReceiptModel response = port.updateOrder(auth, updatemodel);
		// 実行結果を判定します
		if (response.getErrorCode() != null
				&& response.getErrorCode().equals("N00-000")) {
			// リクエストID の格納処理など

		} else {
		}
	}
}
